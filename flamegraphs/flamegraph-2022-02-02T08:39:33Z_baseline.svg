<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="870" onload="init(evt)" viewBox="0 0 1200 870" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="870" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="853.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="853.00"> </text><svg id="frames" x="10" width="1180" total_samples="13677"><g><title>HIToolbox`HIMenuBarView::DrawTextTitle (2 samples, 0.01%)</title><rect x="0.0000%" y="341" width="0.0146%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="351.50"></text></g><g><title>HIToolbox`HIThemeDrawTextBox (2 samples, 0.01%)</title><rect x="0.0000%" y="325" width="0.0146%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="2"/><text x="0.2500%" y="335.50"></text></g><g><title>HIToolbox`DataEngine::DrawTextBox (2 samples, 0.01%)</title><rect x="0.0000%" y="309" width="0.0146%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="2"/><text x="0.2500%" y="319.50"></text></g><g><title>HIToolbox`invocation function for block in DataEngine::DrawTextBox (2 samples, 0.01%)</title><rect x="0.0000%" y="293" width="0.0146%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="2"/><text x="0.2500%" y="303.50"></text></g><g><title>HIToolbox`TCoreTextEngine::DrawThemeTextBox (2 samples, 0.01%)</title><rect x="0.0000%" y="277" width="0.0146%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="2"/><text x="0.2500%" y="287.50"></text></g><g><title>HIToolbox`_HIThemeCUIDrawStyledGlyphsAtPositions (2 samples, 0.01%)</title><rect x="0.0000%" y="261" width="0.0146%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="2"/><text x="0.2500%" y="271.50"></text></g><g><title>CoreUI`CUIDrawStyledGlyphsAtPositions (2 samples, 0.01%)</title><rect x="0.0000%" y="245" width="0.0146%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="2"/><text x="0.2500%" y="255.50"></text></g><g><title>CoreUI`CUIRenderer::DrawStyledGlyphsAtPositions (2 samples, 0.01%)</title><rect x="0.0000%" y="229" width="0.0146%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="2"/><text x="0.2500%" y="239.50"></text></g><g><title>CoreUI`-[CUITextEffectStack drawGlyphs:inContext:usingFont:atPositions:count:lineHeight:inBounds:atScale:] (2 samples, 0.01%)</title><rect x="0.0000%" y="213" width="0.0146%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="2"/><text x="0.2500%" y="223.50"></text></g><g><title>CoreText`CTFontDrawGlyphsAtPositionsInternal (2 samples, 0.01%)</title><rect x="0.0000%" y="197" width="0.0146%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="2"/><text x="0.2500%" y="207.50"></text></g><g><title>CoreText`DrawGlyphsAtPositions(TFont const*, unsigned short const*, CGPoint const*, unsigned long, CGContext*, CGAffineTransform, CGAffineTransform, bool, TRun const*, CGContextType, void const*) (2 samples, 0.01%)</title><rect x="0.0000%" y="181" width="0.0146%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="2"/><text x="0.2500%" y="191.50"></text></g><g><title>CoreText`EnumerateOverlappingGlyphs(CGContext*, TFont const&amp;, unsigned short const*, long, int, void (CFRange, bool) block_pointer) (2 samples, 0.01%)</title><rect x="0.0000%" y="165" width="0.0146%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="2"/><text x="0.2500%" y="175.50"></text></g><g><title>CoreText`invocation function for block in DrawGlyphsAtPositions(TFont const*, unsigned short const*, CGPoint const*, unsigned long, CGContext*, CGAffineTransform, CGAffineTransform, bool, TRun const*, CGContextType, void const*) (2 samples, 0.01%)</title><rect x="0.0000%" y="149" width="0.0146%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="2"/><text x="0.2500%" y="159.50"></text></g><g><title>CoreGraphics`draw_glyphs (2 samples, 0.01%)</title><rect x="0.0000%" y="133" width="0.0146%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="2"/><text x="0.2500%" y="143.50"></text></g><g><title>CoreGraphics`CGContextDelegateDrawGlyphs (2 samples, 0.01%)</title><rect x="0.0000%" y="117" width="0.0146%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="2"/><text x="0.2500%" y="127.50"></text></g><g><title>AppKit`-[NSApplication finishLaunching] (4 samples, 0.03%)</title><rect x="0.0000%" y="709" width="0.0292%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="4"/><text x="0.2500%" y="719.50"></text></g><g><title>HIToolbox`SetSystemUIMode (4 samples, 0.03%)</title><rect x="0.0000%" y="693" width="0.0292%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="4"/><text x="0.2500%" y="703.50"></text></g><g><title>HIToolbox`UpdateAllAggregateUIModes(MenuBarAnimationStyle, unsigned char) (4 samples, 0.03%)</title><rect x="0.0000%" y="677" width="0.0292%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="4"/><text x="0.2500%" y="687.50"></text></g><g><title>HIToolbox`MenuBarInstance::ForEachMenuBarDo(void  (4 samples, 0.03%)</title><rect x="0.0000%" y="661" width="0.0292%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="4"/><text x="0.2500%" y="671.50"></text></g><g><title>HIToolbox`MenuBarInstance::UpdateAggregateUIMode (4 samples, 0.03%)</title><rect x="0.0000%" y="645" width="0.0292%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="4"/><text x="0.2500%" y="655.50"></text></g><g><title>HIToolbox`MenuBarInstance::Show (4 samples, 0.03%)</title><rect x="0.0000%" y="629" width="0.0292%" height="15" fill="rgb(249,33,26)" fg:x="0" fg:w="4"/><text x="0.2500%" y="639.50"></text></g><g><title>HIToolbox`MenuBarInstance::SetBoundsAndUpdateResolution (4 samples, 0.03%)</title><rect x="0.0000%" y="613" width="0.0292%" height="15" fill="rgb(235,183,28)" fg:x="0" fg:w="4"/><text x="0.2500%" y="623.50"></text></g><g><title>HIToolbox`MenuBarInstance::ForEachWindowDo(unsigned char, bool  (4 samples, 0.03%)</title><rect x="0.0000%" y="597" width="0.0292%" height="15" fill="rgb(221,5,38)" fg:x="0" fg:w="4"/><text x="0.2500%" y="607.50"></text></g><g><title>HIToolbox`MBWindows::GetWindowOnDisplay (4 samples, 0.03%)</title><rect x="0.0000%" y="581" width="0.0292%" height="15" fill="rgb(247,18,42)" fg:x="0" fg:w="4"/><text x="0.2500%" y="591.50"></text></g><g><title>HIToolbox`ShowHide (4 samples, 0.03%)</title><rect x="0.0000%" y="565" width="0.0292%" height="15" fill="rgb(241,131,45)" fg:x="0" fg:w="4"/><text x="0.2500%" y="575.50"></text></g><g><title>HIToolbox`_ShowHideWindows (4 samples, 0.03%)</title><rect x="0.0000%" y="549" width="0.0292%" height="15" fill="rgb(249,31,29)" fg:x="0" fg:w="4"/><text x="0.2500%" y="559.50"></text></g><g><title>HIToolbox`WindowData::PrepareForVisibility (4 samples, 0.03%)</title><rect x="0.0000%" y="533" width="0.0292%" height="15" fill="rgb(225,111,53)" fg:x="0" fg:w="4"/><text x="0.2500%" y="543.50"></text></g><g><title>HIToolbox`HIView::DrawComposited (4 samples, 0.03%)</title><rect x="0.0000%" y="517" width="0.0292%" height="15" fill="rgb(238,160,17)" fg:x="0" fg:w="4"/><text x="0.2500%" y="527.50"></text></g><g><title>HIToolbox`HIView::RecursiveDrawComposited (4 samples, 0.03%)</title><rect x="0.0000%" y="501" width="0.0292%" height="15" fill="rgb(214,148,48)" fg:x="0" fg:w="4"/><text x="0.2500%" y="511.50"></text></g><g><title>HIToolbox`HIView::RecursiveDrawComposited (4 samples, 0.03%)</title><rect x="0.0000%" y="485" width="0.0292%" height="15" fill="rgb(232,36,49)" fg:x="0" fg:w="4"/><text x="0.2500%" y="495.50"></text></g><g><title>HIToolbox`HIView::SendDraw (4 samples, 0.03%)</title><rect x="0.0000%" y="469" width="0.0292%" height="15" fill="rgb(209,103,24)" fg:x="0" fg:w="4"/><text x="0.2500%" y="479.50"></text></g><g><title>HIToolbox`SendEventToEventTargetWithOptions (4 samples, 0.03%)</title><rect x="0.0000%" y="453" width="0.0292%" height="15" fill="rgb(229,88,8)" fg:x="0" fg:w="4"/><text x="0.2500%" y="463.50"></text></g><g><title>HIToolbox`SendEventToEventTargetInternal(OpaqueEventRef*, OpaqueEventTargetRef*, HandlerCallRec*) (4 samples, 0.03%)</title><rect x="0.0000%" y="437" width="0.0292%" height="15" fill="rgb(213,181,19)" fg:x="0" fg:w="4"/><text x="0.2500%" y="447.50"></text></g><g><title>HIToolbox`DispatchEventToHandlers(EventTargetRec*, OpaqueEventRef*, HandlerCallRec*) (4 samples, 0.03%)</title><rect x="0.0000%" y="421" width="0.0292%" height="15" fill="rgb(254,191,54)" fg:x="0" fg:w="4"/><text x="0.2500%" y="431.50"></text></g><g><title>HIToolbox`HIMenuBarView::DrawingDelegateHandler (4 samples, 0.03%)</title><rect x="0.0000%" y="405" width="0.0292%" height="15" fill="rgb(241,83,37)" fg:x="0" fg:w="4"/><text x="0.2500%" y="415.50"></text></g><g><title>HIToolbox`HIMenuBarView::DrawSelf (4 samples, 0.03%)</title><rect x="0.0000%" y="389" width="0.0292%" height="15" fill="rgb(233,36,39)" fg:x="0" fg:w="4"/><text x="0.2500%" y="399.50"></text></g><g><title>HIToolbox`HIMenuBarView::DrawIntoWindow (4 samples, 0.03%)</title><rect x="0.0000%" y="373" width="0.0292%" height="15" fill="rgb(226,3,54)" fg:x="0" fg:w="4"/><text x="0.2500%" y="383.50"></text></g><g><title>HIToolbox`HIMenuBarView::DrawOnce (4 samples, 0.03%)</title><rect x="0.0000%" y="357" width="0.0292%" height="15" fill="rgb(245,192,40)" fg:x="0" fg:w="4"/><text x="0.2500%" y="367.50"></text></g><g><title>cheval`cheval::window::WindowFactory::create (6 samples, 0.04%)</title><rect x="0.0000%" y="805" width="0.0439%" height="15" fill="rgb(238,167,29)" fg:x="0" fg:w="6"/><text x="0.2500%" y="815.50"></text></g><g><title>cheval`cheval::window::window_minifb::WindowMinifb::new (6 samples, 0.04%)</title><rect x="0.0000%" y="789" width="0.0439%" height="15" fill="rgb(232,182,51)" fg:x="0" fg:w="6"/><text x="0.2500%" y="799.50"></text></g><g><title>cheval`cheval::window::window_minifb::WindowWithFrame::new (6 samples, 0.04%)</title><rect x="0.0000%" y="773" width="0.0439%" height="15" fill="rgb(231,60,39)" fg:x="0" fg:w="6"/><text x="0.2500%" y="783.50"></text></g><g><title>cheval`minifb::Window::new (6 samples, 0.04%)</title><rect x="0.0000%" y="757" width="0.0439%" height="15" fill="rgb(208,69,12)" fg:x="0" fg:w="6"/><text x="0.2500%" y="767.50"></text></g><g><title>cheval`minifb::os::macos::Window::new (6 samples, 0.04%)</title><rect x="0.0000%" y="741" width="0.0439%" height="15" fill="rgb(235,93,37)" fg:x="0" fg:w="6"/><text x="0.2500%" y="751.50"></text></g><g><title>cheval`mfb_open (6 samples, 0.04%)</title><rect x="0.0000%" y="725" width="0.0439%" height="15" fill="rgb(213,116,39)" fg:x="0" fg:w="6"/><text x="0.2500%" y="735.50"></text></g><g><title>AppKit`-[NSWindow initWithContentRect:styleMask:backing:defer:] (2 samples, 0.01%)</title><rect x="0.0292%" y="709" width="0.0146%" height="15" fill="rgb(222,207,29)" fg:x="4" fg:w="2"/><text x="0.2792%" y="719.50"></text></g><g><title>AppKit`-[NSWindow _initContent:styleMask:backing:defer:contentView:] (2 samples, 0.01%)</title><rect x="0.0292%" y="693" width="0.0146%" height="15" fill="rgb(206,96,30)" fg:x="4" fg:w="2"/><text x="0.2792%" y="703.50"></text></g><g><title>AppKit`-[NSWindow _commonInitFrame:styleMask:backing:defer:] (2 samples, 0.01%)</title><rect x="0.0292%" y="677" width="0.0146%" height="15" fill="rgb(218,138,4)" fg:x="4" fg:w="2"/><text x="0.2792%" y="687.50"></text></g><g><title>AppKit`-[NSApplication(ScreenHandling) _registerForDisplayChangedNotifications] (3 samples, 0.02%)</title><rect x="0.0585%" y="709" width="0.0219%" height="15" fill="rgb(250,191,14)" fg:x="8" fg:w="3"/><text x="0.3085%" y="719.50"></text></g><g><title>libdispatch.dylib`_dispatch_once_callout (3 samples, 0.02%)</title><rect x="0.0585%" y="693" width="0.0219%" height="15" fill="rgb(239,60,40)" fg:x="8" fg:w="3"/><text x="0.3085%" y="703.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (3 samples, 0.02%)</title><rect x="0.0585%" y="677" width="0.0219%" height="15" fill="rgb(206,27,48)" fg:x="8" fg:w="3"/><text x="0.3085%" y="687.50"></text></g><g><title>AppKit`___NSScreenConfigurationEnsureInitialUpdateOccurred_block_invoke (3 samples, 0.02%)</title><rect x="0.0585%" y="661" width="0.0219%" height="15" fill="rgb(225,35,8)" fg:x="8" fg:w="3"/><text x="0.3085%" y="671.50"></text></g><g><title>AppKit`_NSScreenConfigurationUpdateSharedInfoForReason (3 samples, 0.02%)</title><rect x="0.0585%" y="645" width="0.0219%" height="15" fill="rgb(250,213,24)" fg:x="8" fg:w="3"/><text x="0.3085%" y="655.50"></text></g><g><title>AppKit`_NSCGSDisplayConfigurationGetCurrent (2 samples, 0.01%)</title><rect x="0.0658%" y="629" width="0.0146%" height="15" fill="rgb(247,123,22)" fg:x="9" fg:w="2"/><text x="0.3158%" y="639.50"></text></g><g><title>libdispatch.dylib`_dispatch_once_callout (2 samples, 0.01%)</title><rect x="0.0658%" y="613" width="0.0146%" height="15" fill="rgb(231,138,38)" fg:x="9" fg:w="2"/><text x="0.3158%" y="623.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (2 samples, 0.01%)</title><rect x="0.0658%" y="597" width="0.0146%" height="15" fill="rgb(231,145,46)" fg:x="9" fg:w="2"/><text x="0.3158%" y="607.50"></text></g><g><title>AppKit`_NSCGSDisplayConfigurationUpdate (2 samples, 0.01%)</title><rect x="0.0658%" y="581" width="0.0146%" height="15" fill="rgb(251,118,11)" fg:x="9" fg:w="2"/><text x="0.3158%" y="591.50"></text></g><g><title>AppKit`_NSCGSCreateArrayUsingBlock (2 samples, 0.01%)</title><rect x="0.0658%" y="565" width="0.0146%" height="15" fill="rgb(217,147,25)" fg:x="9" fg:w="2"/><text x="0.3158%" y="575.50"></text></g><g><title>AppKit`___NSCGSCreateDisplaysFromDisplayIDsUsingPredicate_block_invoke (2 samples, 0.01%)</title><rect x="0.0658%" y="549" width="0.0146%" height="15" fill="rgb(247,81,37)" fg:x="9" fg:w="2"/><text x="0.3158%" y="559.50"></text></g><g><title>AppKit`-[NSCGSDisplay initWithDisplayID:flipOffset:] (2 samples, 0.01%)</title><rect x="0.0658%" y="533" width="0.0146%" height="15" fill="rgb(209,12,38)" fg:x="9" fg:w="2"/><text x="0.3158%" y="543.50"></text></g><g><title>LaunchServices`_LSSetApplicationInformationItem (2 samples, 0.01%)</title><rect x="0.0877%" y="629" width="0.0146%" height="15" fill="rgb(227,1,9)" fg:x="12" fg:w="2"/><text x="0.3377%" y="639.50"></text></g><g><title>LaunchServices`_LSSetApplicationInformation (2 samples, 0.01%)</title><rect x="0.0877%" y="613" width="0.0146%" height="15" fill="rgb(248,47,43)" fg:x="12" fg:w="2"/><text x="0.3377%" y="623.50"></text></g><g><title>LaunchServices`LSClientToServerConnection::sendWithReply (2 samples, 0.01%)</title><rect x="0.0877%" y="597" width="0.0146%" height="15" fill="rgb(221,10,30)" fg:x="12" fg:w="2"/><text x="0.3377%" y="607.50"></text></g><g><title>libxpc.dylib`xpc_connection_send_message_with_reply_sync (2 samples, 0.01%)</title><rect x="0.0877%" y="581" width="0.0146%" height="15" fill="rgb(210,229,1)" fg:x="12" fg:w="2"/><text x="0.3377%" y="591.50"></text></g><g><title>libdispatch.dylib`dispatch_mach_send_with_result_and_wait_for_reply (2 samples, 0.01%)</title><rect x="0.0877%" y="565" width="0.0146%" height="15" fill="rgb(222,148,37)" fg:x="12" fg:w="2"/><text x="0.3377%" y="575.50"></text></g><g><title>libdispatch.dylib`_dispatch_mach_send_and_wait_for_reply (2 samples, 0.01%)</title><rect x="0.0877%" y="549" width="0.0146%" height="15" fill="rgb(234,67,33)" fg:x="12" fg:w="2"/><text x="0.3377%" y="559.50"></text></g><g><title>libdispatch.dylib`dispatch_mach_msg_create (2 samples, 0.01%)</title><rect x="0.0877%" y="533" width="0.0146%" height="15" fill="rgb(247,98,35)" fg:x="12" fg:w="2"/><text x="0.3377%" y="543.50"></text></g><g><title>libdispatch.dylib`_os_object_alloc_realized (2 samples, 0.01%)</title><rect x="0.0877%" y="517" width="0.0146%" height="15" fill="rgb(247,138,52)" fg:x="12" fg:w="2"/><text x="0.3377%" y="527.50"></text></g><g><title>libobjc.A.dylib`class_createInstance (2 samples, 0.01%)</title><rect x="0.0877%" y="501" width="0.0146%" height="15" fill="rgb(213,79,30)" fg:x="12" fg:w="2"/><text x="0.3377%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (2 samples, 0.01%)</title><rect x="0.0877%" y="485" width="0.0146%" height="15" fill="rgb(246,177,23)" fg:x="12" fg:w="2"/><text x="0.3377%" y="495.50"></text></g><g><title>AppKit`+[NSApplication sharedApplication] (9 samples, 0.07%)</title><rect x="0.0439%" y="741" width="0.0658%" height="15" fill="rgb(230,62,27)" fg:x="6" fg:w="9"/><text x="0.2939%" y="751.50"></text></g><g><title>AppKit`-[NSApplication init] (9 samples, 0.07%)</title><rect x="0.0439%" y="725" width="0.0658%" height="15" fill="rgb(216,154,8)" fg:x="6" fg:w="9"/><text x="0.2939%" y="735.50"></text></g><g><title>AppKit`_NSInitializeAppContext (4 samples, 0.03%)</title><rect x="0.0804%" y="709" width="0.0292%" height="15" fill="rgb(244,35,45)" fg:x="11" fg:w="4"/><text x="0.3304%" y="719.50"></text></g><g><title>HIToolbox`MenuBarInstance::IsVisible (4 samples, 0.03%)</title><rect x="0.0804%" y="693" width="0.0292%" height="15" fill="rgb(251,115,12)" fg:x="11" fg:w="4"/><text x="0.3304%" y="703.50"></text></g><g><title>HIToolbox`MenuBarInstance::GetAggregateUIMode (4 samples, 0.03%)</title><rect x="0.0804%" y="677" width="0.0292%" height="15" fill="rgb(240,54,50)" fg:x="11" fg:w="4"/><text x="0.3304%" y="687.50"></text></g><g><title>HIServices`GetCurrentProcess (4 samples, 0.03%)</title><rect x="0.0804%" y="661" width="0.0292%" height="15" fill="rgb(233,84,52)" fg:x="11" fg:w="4"/><text x="0.3304%" y="671.50"></text></g><g><title>HIServices`_RegisterApplication (4 samples, 0.03%)</title><rect x="0.0804%" y="645" width="0.0292%" height="15" fill="rgb(207,117,47)" fg:x="11" fg:w="4"/><text x="0.3304%" y="655.50"></text></g><g><title>CoreText`TDescriptorSource::CopyXTypeFontWithName (2 samples, 0.01%)</title><rect x="0.1316%" y="293" width="0.0146%" height="15" fill="rgb(249,43,39)" fg:x="18" fg:w="2"/><text x="0.3816%" y="303.50"></text></g><g><title>libFontRegistry.dylib`XTCopyFontWithName (2 samples, 0.01%)</title><rect x="0.1316%" y="277" width="0.0146%" height="15" fill="rgb(209,38,44)" fg:x="18" fg:w="2"/><text x="0.3816%" y="287.50"></text></g><g><title>libFontRegistry.dylib`TGlobalFontRegistry::TGlobalFontRegistry (2 samples, 0.01%)</title><rect x="0.1316%" y="261" width="0.0146%" height="15" fill="rgb(236,212,23)" fg:x="18" fg:w="2"/><text x="0.3816%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_once (2 samples, 0.01%)</title><rect x="0.1316%" y="245" width="0.0146%" height="15" fill="rgb(242,79,21)" fg:x="18" fg:w="2"/><text x="0.3816%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_os_once_callout (2 samples, 0.01%)</title><rect x="0.1316%" y="229" width="0.0146%" height="15" fill="rgb(211,96,35)" fg:x="18" fg:w="2"/><text x="0.3816%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`__pthread_once_handler (2 samples, 0.01%)</title><rect x="0.1316%" y="213" width="0.0146%" height="15" fill="rgb(253,215,40)" fg:x="18" fg:w="2"/><text x="0.3816%" y="223.50"></text></g><g><title>libFontRegistry.dylib`TGlobalFontRegistry::CreateRegistry (2 samples, 0.01%)</title><rect x="0.1316%" y="197" width="0.0146%" height="15" fill="rgb(211,81,21)" fg:x="18" fg:w="2"/><text x="0.3816%" y="207.50"></text></g><g><title>UIFoundation`+[__NSFontTypefaceInfo typefaceInfoForFontDescriptor:] (3 samples, 0.02%)</title><rect x="0.1316%" y="453" width="0.0219%" height="15" fill="rgb(208,190,38)" fg:x="18" fg:w="3"/><text x="0.3816%" y="463.50"></text></g><g><title>Foundation`-[NSConcreteMapTable setObject:forKey:] (3 samples, 0.02%)</title><rect x="0.1316%" y="437" width="0.0219%" height="15" fill="rgb(235,213,38)" fg:x="18" fg:w="3"/><text x="0.3816%" y="447.50"></text></g><g><title>Foundation`probeGC (3 samples, 0.02%)</title><rect x="0.1316%" y="421" width="0.0219%" height="15" fill="rgb(237,122,38)" fg:x="18" fg:w="3"/><text x="0.3816%" y="431.50"></text></g><g><title>CoreText`TDescriptor::Hash (3 samples, 0.02%)</title><rect x="0.1316%" y="405" width="0.0219%" height="15" fill="rgb(244,218,35)" fg:x="18" fg:w="3"/><text x="0.3816%" y="415.50"></text></g><g><title>CoreText`TDescriptor::InitBaseFont (3 samples, 0.02%)</title><rect x="0.1316%" y="389" width="0.0219%" height="15" fill="rgb(240,68,47)" fg:x="18" fg:w="3"/><text x="0.3816%" y="399.50"></text></g><g><title>CoreText`TDescriptor::CreateMatchingDescriptorInternal (3 samples, 0.02%)</title><rect x="0.1316%" y="373" width="0.0219%" height="15" fill="rgb(210,16,53)" fg:x="18" fg:w="3"/><text x="0.3816%" y="383.50"></text></g><g><title>CoreText`TDescriptorSource::CopySplicedDescriptorForName (3 samples, 0.02%)</title><rect x="0.1316%" y="357" width="0.0219%" height="15" fill="rgb(235,124,12)" fg:x="18" fg:w="3"/><text x="0.3816%" y="367.50"></text></g><g><title>CoreText`TDescriptorSource::CopySpliceFontForName (3 samples, 0.02%)</title><rect x="0.1316%" y="341" width="0.0219%" height="15" fill="rgb(224,169,11)" fg:x="18" fg:w="3"/><text x="0.3816%" y="351.50"></text></g><g><title>CoreText`MakeSpliceDescriptor(__CFString const*, unsigned long, __CFString const*, __CFString const*, __CFNumber const*, __CFNumber const*, unsigned int, CTFontTextStylePlatform, unsigned int, __CFNumber const*, CTFontLegibilityWeight, __CFBoolean const*) (3 samples, 0.02%)</title><rect x="0.1316%" y="325" width="0.0219%" height="15" fill="rgb(250,166,2)" fg:x="18" fg:w="3"/><text x="0.3816%" y="335.50"></text></g><g><title>CoreText`AddVariationInfo(TCFMutableDictionary&amp;, __CFString const*) (3 samples, 0.02%)</title><rect x="0.1316%" y="309" width="0.0219%" height="15" fill="rgb(242,216,29)" fg:x="18" fg:w="3"/><text x="0.3816%" y="319.50"></text></g><g><title>AppKit`-[NSButtonCell initTextCell:] (4 samples, 0.03%)</title><rect x="0.1316%" y="517" width="0.0292%" height="15" fill="rgb(230,116,27)" fg:x="18" fg:w="4"/><text x="0.3816%" y="527.50"></text></g><g><title>AppKit`-[NSButtonCell _convertToText:] (4 samples, 0.03%)</title><rect x="0.1316%" y="501" width="0.0292%" height="15" fill="rgb(228,99,48)" fg:x="18" fg:w="4"/><text x="0.3816%" y="511.50"></text></g><g><title>AppKit`-[NSCell _convertToText:] (4 samples, 0.03%)</title><rect x="0.1316%" y="485" width="0.0292%" height="15" fill="rgb(253,11,6)" fg:x="18" fg:w="4"/><text x="0.3816%" y="495.50"></text></g><g><title>UIFoundation`__NSGetMetaFontInstanceWithType (4 samples, 0.03%)</title><rect x="0.1316%" y="469" width="0.0292%" height="15" fill="rgb(247,143,39)" fg:x="18" fg:w="4"/><text x="0.3816%" y="479.50"></text></g><g><title>AppKit`-[NSThemeFrame _updateTitleProperties:animated:] (7 samples, 0.05%)</title><rect x="0.1170%" y="661" width="0.0512%" height="15" fill="rgb(236,97,10)" fg:x="16" fg:w="7"/><text x="0.3670%" y="671.50"></text></g><g><title>AppKit`-[NSThemeFrame setRepresentedURL:] (7 samples, 0.05%)</title><rect x="0.1170%" y="645" width="0.0512%" height="15" fill="rgb(233,208,19)" fg:x="16" fg:w="7"/><text x="0.3670%" y="655.50"></text></g><g><title>AppKit`-[NSThemeFrame _updateButtons] (7 samples, 0.05%)</title><rect x="0.1170%" y="629" width="0.0512%" height="15" fill="rgb(216,164,2)" fg:x="16" fg:w="7"/><text x="0.3670%" y="639.50"></text></g><g><title>AppKit`-[NSThemeFrame newCloseButton] (6 samples, 0.04%)</title><rect x="0.1243%" y="613" width="0.0439%" height="15" fill="rgb(220,129,5)" fg:x="17" fg:w="6"/><text x="0.3743%" y="623.50"></text></g><g><title>AppKit`+[_NSThemeCloseWidget closeWidgetInView:withButtonID:action:] (6 samples, 0.04%)</title><rect x="0.1243%" y="597" width="0.0439%" height="15" fill="rgb(242,17,10)" fg:x="17" fg:w="6"/><text x="0.3743%" y="607.50"></text></g><g><title>AppKit`-[_NSThemeWidget initWithButtonID:] (6 samples, 0.04%)</title><rect x="0.1243%" y="581" width="0.0439%" height="15" fill="rgb(242,107,0)" fg:x="17" fg:w="6"/><text x="0.3743%" y="591.50"></text></g><g><title>AppKit`-[NSButton initWithFrame:] (6 samples, 0.04%)</title><rect x="0.1243%" y="565" width="0.0439%" height="15" fill="rgb(251,28,31)" fg:x="17" fg:w="6"/><text x="0.3743%" y="575.50"></text></g><g><title>AppKit`-[NSControl initWithFrame:] (5 samples, 0.04%)</title><rect x="0.1316%" y="549" width="0.0366%" height="15" fill="rgb(233,223,10)" fg:x="18" fg:w="5"/><text x="0.3816%" y="559.50"></text></g><g><title>AppKit`-[NSButtonCell init] (5 samples, 0.04%)</title><rect x="0.1316%" y="533" width="0.0366%" height="15" fill="rgb(215,21,27)" fg:x="18" fg:w="5"/><text x="0.3816%" y="543.50"></text></g><g><title>AppKit`-[NSFrameView initWithFrame:styleMask:owner:] (8 samples, 0.06%)</title><rect x="0.1170%" y="677" width="0.0585%" height="15" fill="rgb(232,23,21)" fg:x="16" fg:w="8"/><text x="0.3670%" y="687.50"></text></g><g><title>AppKit`-[NSThemeFrame initWithFrame:styleMask:owner:] (12 samples, 0.09%)</title><rect x="0.1170%" y="693" width="0.0877%" height="15" fill="rgb(244,5,23)" fg:x="16" fg:w="12"/><text x="0.3670%" y="703.50"></text></g><g><title>AppKit`-[NSThemeFrame _floatTitlebarAndToolbarFromInit:] (4 samples, 0.03%)</title><rect x="0.1755%" y="677" width="0.0292%" height="15" fill="rgb(226,81,46)" fg:x="24" fg:w="4"/><text x="0.4255%" y="687.50"></text></g><g><title>AppKit`+[NSAnimationContext runAnimationGroup:] (4 samples, 0.03%)</title><rect x="0.1755%" y="661" width="0.0292%" height="15" fill="rgb(247,70,30)" fg:x="24" fg:w="4"/><text x="0.4255%" y="671.50"></text></g><g><title>AppKit`__49-[NSThemeFrame _floatTitlebarAndToolbarFromInit:]_block_invoke (3 samples, 0.02%)</title><rect x="0.1828%" y="645" width="0.0219%" height="15" fill="rgb(212,68,19)" fg:x="25" fg:w="3"/><text x="0.4328%" y="655.50"></text></g><g><title>AppKit`-[NSWindow initWithContentRect:styleMask:backing:defer:] (14 samples, 0.10%)</title><rect x="0.1097%" y="741" width="0.1024%" height="15" fill="rgb(240,187,13)" fg:x="15" fg:w="14"/><text x="0.3597%" y="751.50"></text></g><g><title>AppKit`-[NSWindow _initContent:styleMask:backing:defer:contentView:] (14 samples, 0.10%)</title><rect x="0.1097%" y="725" width="0.1024%" height="15" fill="rgb(223,113,26)" fg:x="15" fg:w="14"/><text x="0.3597%" y="735.50"></text></g><g><title>AppKit`-[NSWindow _commonInitFrame:styleMask:backing:defer:] (13 samples, 0.10%)</title><rect x="0.1170%" y="709" width="0.0951%" height="15" fill="rgb(206,192,2)" fg:x="16" fg:w="13"/><text x="0.3670%" y="719.50"></text></g><g><title>cheval`cheval::window::window_minifb::WindowWithFrame::new (26 samples, 0.19%)</title><rect x="0.0439%" y="805" width="0.1901%" height="15" fill="rgb(241,108,4)" fg:x="6" fg:w="26"/><text x="0.2939%" y="815.50"></text></g><g><title>cheval`minifb::Window::new (26 samples, 0.19%)</title><rect x="0.0439%" y="789" width="0.1901%" height="15" fill="rgb(247,173,49)" fg:x="6" fg:w="26"/><text x="0.2939%" y="799.50"></text></g><g><title>cheval`minifb::os::macos::Window::new (26 samples, 0.19%)</title><rect x="0.0439%" y="773" width="0.1901%" height="15" fill="rgb(224,114,35)" fg:x="6" fg:w="26"/><text x="0.2939%" y="783.50"></text></g><g><title>cheval`mfb_open (26 samples, 0.19%)</title><rect x="0.0439%" y="757" width="0.1901%" height="15" fill="rgb(245,159,27)" fg:x="6" fg:w="26"/><text x="0.2939%" y="767.50"></text></g><g><title>Metal`MTLCreateSystemDefaultDevice (3 samples, 0.02%)</title><rect x="0.2120%" y="741" width="0.0219%" height="15" fill="rgb(245,172,44)" fg:x="29" fg:w="3"/><text x="0.4620%" y="751.50"></text></g><g><title>libdispatch.dylib`_dispatch_once_callout (3 samples, 0.02%)</title><rect x="0.2120%" y="725" width="0.0219%" height="15" fill="rgb(236,23,11)" fg:x="29" fg:w="3"/><text x="0.4620%" y="735.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (3 samples, 0.02%)</title><rect x="0.2120%" y="709" width="0.0219%" height="15" fill="rgb(205,117,38)" fg:x="29" fg:w="3"/><text x="0.4620%" y="719.50"></text></g><g><title>Metal`invocation function for block in MTLDeviceArrayInitialize() (3 samples, 0.02%)</title><rect x="0.2120%" y="693" width="0.0219%" height="15" fill="rgb(237,72,25)" fg:x="29" fg:w="3"/><text x="0.4620%" y="703.50"></text></g><g><title>Metal`+[MTLIOAccelDevice registerDevices] (3 samples, 0.02%)</title><rect x="0.2120%" y="677" width="0.0219%" height="15" fill="rgb(244,70,9)" fg:x="29" fg:w="3"/><text x="0.4620%" y="687.50"></text></g><g><title>Metal`MTLIOAccelServiceRegisterService (3 samples, 0.02%)</title><rect x="0.2120%" y="661" width="0.0219%" height="15" fill="rgb(217,125,39)" fg:x="29" fg:w="3"/><text x="0.4620%" y="671.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_barrier_sync_invoke_and_complete (3 samples, 0.02%)</title><rect x="0.2120%" y="645" width="0.0219%" height="15" fill="rgb(235,36,10)" fg:x="29" fg:w="3"/><text x="0.4620%" y="655.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (3 samples, 0.02%)</title><rect x="0.2120%" y="629" width="0.0219%" height="15" fill="rgb(251,123,47)" fg:x="29" fg:w="3"/><text x="0.4620%" y="639.50"></text></g><g><title>Metal`+[MTLIOAccelService registerService:] (3 samples, 0.02%)</title><rect x="0.2120%" y="613" width="0.0219%" height="15" fill="rgb(221,13,13)" fg:x="29" fg:w="3"/><text x="0.4620%" y="623.50"></text></g><g><title>Metal`-[MTLIOAccelService initWithAcceleratorPort:] (3 samples, 0.02%)</title><rect x="0.2120%" y="597" width="0.0219%" height="15" fill="rgb(238,131,9)" fg:x="29" fg:w="3"/><text x="0.4620%" y="607.50"></text></g><g><title>AGXMetalG13X`0x00000001d3d8375c (3 samples, 0.02%)</title><rect x="0.2120%" y="581" width="0.0219%" height="15" fill="rgb(211,50,8)" fg:x="29" fg:w="3"/><text x="0.4620%" y="591.50"></text></g><g><title>AGXMetalG13X`0x00000001d3d699b8 (3 samples, 0.02%)</title><rect x="0.2120%" y="565" width="0.0219%" height="15" fill="rgb(245,182,24)" fg:x="29" fg:w="3"/><text x="0.4620%" y="575.50"></text></g><g><title>IOGPU`-[IOGPUMetalTexture replaceRegion:mipmapLevel:withBytes:bytesPerRow:] (5 samples, 0.04%)</title><rect x="49.5211%" y="293" width="0.0366%" height="15" fill="rgb(242,14,37)" fg:x="6773" fg:w="5"/><text x="49.7711%" y="303.50"></text></g><g><title>AGXMetalG13X`0x00000001d3d921fc (5 samples, 0.04%)</title><rect x="49.5211%" y="277" width="0.0366%" height="15" fill="rgb(246,228,12)" fg:x="6773" fg:w="5"/><text x="49.7711%" y="287.50"></text></g><g><title>AGXMetalG13X`0x00000001d3d92264 (5 samples, 0.04%)</title><rect x="49.5211%" y="261" width="0.0366%" height="15" fill="rgb(213,55,15)" fg:x="6773" fg:w="5"/><text x="49.7711%" y="271.50"></text></g><g><title>AGXMetalG13X`0x00000001d3d948fc (5 samples, 0.04%)</title><rect x="49.5211%" y="245" width="0.0366%" height="15" fill="rgb(209,9,3)" fg:x="6773" fg:w="5"/><text x="49.7711%" y="255.50"></text></g><g><title>AGXMetalG13X`0x00000001d3de4bec (5 samples, 0.04%)</title><rect x="49.5211%" y="229" width="0.0366%" height="15" fill="rgb(230,59,30)" fg:x="6773" fg:w="5"/><text x="49.7711%" y="239.50"></text></g><g><title>CoreFoundation`__CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__ (8 samples, 0.06%)</title><rect x="49.5138%" y="421" width="0.0585%" height="15" fill="rgb(209,121,21)" fg:x="6772" fg:w="8"/><text x="49.7638%" y="431.50"></text></g><g><title>libdispatch.dylib`_dispatch_main_queue_callback_4CF (8 samples, 0.06%)</title><rect x="49.5138%" y="405" width="0.0585%" height="15" fill="rgb(220,109,13)" fg:x="6772" fg:w="8"/><text x="49.7638%" y="415.50"></text></g><g><title>libdispatch.dylib`_dispatch_source_invoke (7 samples, 0.05%)</title><rect x="49.5211%" y="389" width="0.0512%" height="15" fill="rgb(232,18,1)" fg:x="6773" fg:w="7"/><text x="49.7711%" y="399.50"></text></g><g><title>libdispatch.dylib`_dispatch_continuation_pop (7 samples, 0.05%)</title><rect x="49.5211%" y="373" width="0.0512%" height="15" fill="rgb(215,41,42)" fg:x="6773" fg:w="7"/><text x="49.7711%" y="383.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (7 samples, 0.05%)</title><rect x="49.5211%" y="357" width="0.0512%" height="15" fill="rgb(224,123,36)" fg:x="6773" fg:w="7"/><text x="49.7711%" y="367.50"></text></g><g><title>MetalKit`__23-[MTKView __initCommon]_block_invoke (7 samples, 0.05%)</title><rect x="49.5211%" y="341" width="0.0512%" height="15" fill="rgb(240,125,3)" fg:x="6773" fg:w="7"/><text x="49.7711%" y="351.50"></text></g><g><title>MetalKit`-[MTKView draw] (7 samples, 0.05%)</title><rect x="49.5211%" y="325" width="0.0512%" height="15" fill="rgb(205,98,50)" fg:x="6773" fg:w="7"/><text x="49.7711%" y="335.50"></text></g><g><title>cheval`-[WindowViewController drawInMTKView:] (7 samples, 0.05%)</title><rect x="49.5211%" y="309" width="0.0512%" height="15" fill="rgb(205,185,37)" fg:x="6773" fg:w="7"/><text x="49.7711%" y="319.50"></text></g><g><title>AppKit`-[NSVisualEffectView updateLayer] (2 samples, 0.01%)</title><rect x="49.5942%" y="229" width="0.0146%" height="15" fill="rgb(238,207,15)" fg:x="6783" fg:w="2"/><text x="49.8442%" y="239.50"></text></g><g><title>AppKit`-[NSVisualEffectView _updateMaterialLayer] (2 samples, 0.01%)</title><rect x="49.5942%" y="213" width="0.0146%" height="15" fill="rgb(213,199,42)" fg:x="6783" fg:w="2"/><text x="49.8442%" y="223.50"></text></g><g><title>AppKit`makeMaterialLayerWithCoreUIOptions (2 samples, 0.01%)</title><rect x="49.5942%" y="197" width="0.0146%" height="15" fill="rgb(235,201,11)" fg:x="6783" fg:w="2"/><text x="49.8442%" y="207.50"></text></g><g><title>AppKit`-[NSAppearance _createOrUpdateLayer:options:] (2 samples, 0.01%)</title><rect x="49.5942%" y="181" width="0.0146%" height="15" fill="rgb(207,46,11)" fg:x="6783" fg:w="2"/><text x="49.8442%" y="191.50"></text></g><g><title>AppKit`-[NSCompositeAppearance _callCoreUIWithBlock:options:requireBezelTintColor:] (2 samples, 0.01%)</title><rect x="49.5942%" y="165" width="0.0146%" height="15" fill="rgb(241,35,35)" fg:x="6783" fg:w="2"/><text x="49.8442%" y="175.50"></text></g><g><title>CoreUI`CUIRenderer::CreateOrUpdateLayer (2 samples, 0.01%)</title><rect x="49.5942%" y="149" width="0.0146%" height="15" fill="rgb(243,32,47)" fg:x="6783" fg:w="2"/><text x="49.8442%" y="159.50"></text></g><g><title>CoreUI`CUICoreThemeRenderer::CreateOrUpdateLayer (2 samples, 0.01%)</title><rect x="49.5942%" y="133" width="0.0146%" height="15" fill="rgb(247,202,23)" fg:x="6783" fg:w="2"/><text x="49.8442%" y="143.50"></text></g><g><title>CoreUI`CUICoreThemeRenderer::CreateOrUpdateVisualEffectLayer (2 samples, 0.01%)</title><rect x="49.5942%" y="117" width="0.0146%" height="15" fill="rgb(219,102,11)" fg:x="6783" fg:w="2"/><text x="49.8442%" y="127.50"></text></g><g><title>CoreUI`-[CUIThemeFacet updateLayer:effects:] (2 samples, 0.01%)</title><rect x="49.5942%" y="101" width="0.0146%" height="15" fill="rgb(243,110,44)" fg:x="6783" fg:w="2"/><text x="49.8442%" y="111.50"></text></g><g><title>CoreUI`-[CUIThemeFacet _makeLayerFromCAPackageData] (2 samples, 0.01%)</title><rect x="49.5942%" y="85" width="0.0146%" height="15" fill="rgb(222,74,54)" fg:x="6783" fg:w="2"/><text x="49.8442%" y="95.50"></text></g><g><title>QuartzCore`+[CAPackage packageWithData:type:options:error:] (2 samples, 0.01%)</title><rect x="49.5942%" y="69" width="0.0146%" height="15" fill="rgb(216,99,12)" fg:x="6783" fg:w="2"/><text x="49.8442%" y="79.50"></text></g><g><title>QuartzCore`-[CAPackage _initWithData:type:options:error:] (2 samples, 0.01%)</title><rect x="49.5942%" y="53" width="0.0146%" height="15" fill="rgb(226,22,26)" fg:x="6783" fg:w="2"/><text x="49.8442%" y="63.50"></text></g><g><title>QuartzCore`-[CAPackage _readFromArchiveData:options:error:] (2 samples, 0.01%)</title><rect x="49.5942%" y="37" width="0.0146%" height="15" fill="rgb(217,163,10)" fg:x="6783" fg:w="2"/><text x="49.8442%" y="47.50"></text></g><g><title>QuartzCore`CA::Context::commit_transaction (6 samples, 0.04%)</title><rect x="49.5796%" y="341" width="0.0439%" height="15" fill="rgb(213,25,53)" fg:x="6781" fg:w="6"/><text x="49.8296%" y="351.50"></text></g><g><title>QuartzCore`CA::Layer::display_if_needed (5 samples, 0.04%)</title><rect x="49.5869%" y="325" width="0.0366%" height="15" fill="rgb(252,105,26)" fg:x="6782" fg:w="5"/><text x="49.8369%" y="335.50"></text></g><g><title>AppKit`-[_NSViewBackingLayer display] (4 samples, 0.03%)</title><rect x="49.5942%" y="309" width="0.0292%" height="15" fill="rgb(220,39,43)" fg:x="6783" fg:w="4"/><text x="49.8442%" y="319.50"></text></g><g><title>AppKit`-[NSFocusStack performWithFocusView:inWindow:usingBlock:] (4 samples, 0.03%)</title><rect x="49.5942%" y="293" width="0.0292%" height="15" fill="rgb(229,68,48)" fg:x="6783" fg:w="4"/><text x="49.8442%" y="303.50"></text></g><g><title>AppKit`__30-[_NSViewBackingLayer display]_block_invoke (4 samples, 0.03%)</title><rect x="49.5942%" y="277" width="0.0292%" height="15" fill="rgb(252,8,32)" fg:x="6783" fg:w="4"/><text x="49.8442%" y="287.50"></text></g><g><title>AppKit`+[NSAppearance _performWithCurrentAppearance:usingBlock:] (4 samples, 0.03%)</title><rect x="49.5942%" y="261" width="0.0292%" height="15" fill="rgb(223,20,43)" fg:x="6783" fg:w="4"/><text x="49.8442%" y="271.50"></text></g><g><title>AppKit`_NSViewUpdateLayer (4 samples, 0.03%)</title><rect x="49.5942%" y="245" width="0.0292%" height="15" fill="rgb(229,81,49)" fg:x="6783" fg:w="4"/><text x="49.8442%" y="255.50"></text></g><g><title>AppKit`__NSWindowGetDisplayCycleObserverForDisplay_block_invoke (2 samples, 0.01%)</title><rect x="49.6235%" y="293" width="0.0146%" height="15" fill="rgb(236,28,36)" fg:x="6787" fg:w="2"/><text x="49.8735%" y="303.50"></text></g><g><title>AppKit`-[NSWindow displayIfNeeded] (2 samples, 0.01%)</title><rect x="49.6235%" y="277" width="0.0146%" height="15" fill="rgb(249,185,26)" fg:x="6787" fg:w="2"/><text x="49.8735%" y="287.50"></text></g><g><title>AppKit`NSWindowUpdateLayerTree (2 samples, 0.01%)</title><rect x="49.6235%" y="261" width="0.0146%" height="15" fill="rgb(249,174,33)" fg:x="6787" fg:w="2"/><text x="49.8735%" y="271.50"></text></g><g><title>CoreFoundation`__CFRunLoopDoObservers (9 samples, 0.07%)</title><rect x="49.5796%" y="421" width="0.0658%" height="15" fill="rgb(233,201,37)" fg:x="6781" fg:w="9"/><text x="49.8296%" y="431.50"></text></g><g><title>CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__ (9 samples, 0.07%)</title><rect x="49.5796%" y="405" width="0.0658%" height="15" fill="rgb(221,78,26)" fg:x="6781" fg:w="9"/><text x="49.8296%" y="415.50"></text></g><g><title>AppKit`___NSRunLoopObserverCreateWithHandler_block_invoke (9 samples, 0.07%)</title><rect x="49.5796%" y="389" width="0.0658%" height="15" fill="rgb(250,127,30)" fg:x="6781" fg:w="9"/><text x="49.8296%" y="399.50"></text></g><g><title>AppKit`__62+[CATransaction(NSCATransaction) NS_setFlushesWithDisplayLink]_block_invoke (9 samples, 0.07%)</title><rect x="49.5796%" y="373" width="0.0658%" height="15" fill="rgb(230,49,44)" fg:x="6781" fg:w="9"/><text x="49.8296%" y="383.50"></text></g><g><title>QuartzCore`CA::Transaction::commit (9 samples, 0.07%)</title><rect x="49.5796%" y="357" width="0.0658%" height="15" fill="rgb(229,67,23)" fg:x="6781" fg:w="9"/><text x="49.8296%" y="367.50"></text></g><g><title>QuartzCore`CA::Transaction::run_commit_handlers (3 samples, 0.02%)</title><rect x="49.6235%" y="341" width="0.0219%" height="15" fill="rgb(249,83,47)" fg:x="6787" fg:w="3"/><text x="49.8735%" y="351.50"></text></g><g><title>AppKit`NSDisplayCycleFlush (3 samples, 0.02%)</title><rect x="49.6235%" y="325" width="0.0219%" height="15" fill="rgb(215,43,3)" fg:x="6787" fg:w="3"/><text x="49.8735%" y="335.50"></text></g><g><title>AppKit`NSDisplayCycleObserverInvoke (3 samples, 0.02%)</title><rect x="49.6235%" y="309" width="0.0219%" height="15" fill="rgb(238,154,13)" fg:x="6787" fg:w="3"/><text x="49.8735%" y="319.50"></text></g><g><title>CoreFoundation`CFRunLoopRunSpecific (21 samples, 0.15%)</title><rect x="49.5065%" y="453" width="0.1535%" height="15" fill="rgb(219,56,2)" fg:x="6771" fg:w="21"/><text x="49.7565%" y="463.50"></text></g><g><title>CoreFoundation`__CFRunLoopRun (20 samples, 0.15%)</title><rect x="49.5138%" y="437" width="0.1462%" height="15" fill="rgb(233,0,4)" fg:x="6772" fg:w="20"/><text x="49.7638%" y="447.50"></text></g><g><title>CoreFoundation`__CFRunLoopDoTimers (2 samples, 0.01%)</title><rect x="49.6454%" y="421" width="0.0146%" height="15" fill="rgb(235,30,7)" fg:x="6790" fg:w="2"/><text x="49.8954%" y="431.50"></text></g><g><title>CoreFoundation`__CFRunLoopDoTimer (2 samples, 0.01%)</title><rect x="49.6454%" y="405" width="0.0146%" height="15" fill="rgb(250,79,13)" fg:x="6790" fg:w="2"/><text x="49.8954%" y="415.50"></text></g><g><title>CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__ (2 samples, 0.01%)</title><rect x="49.6454%" y="389" width="0.0146%" height="15" fill="rgb(211,146,34)" fg:x="6790" fg:w="2"/><text x="49.8954%" y="399.50"></text></g><g><title>HIToolbox`CallMyActivateTSMDocument (2 samples, 0.01%)</title><rect x="49.6454%" y="373" width="0.0146%" height="15" fill="rgb(228,22,38)" fg:x="6790" fg:w="2"/><text x="49.8954%" y="383.50"></text></g><g><title>HIToolbox`MyActivateTSMDocument (2 samples, 0.01%)</title><rect x="49.6454%" y="357" width="0.0146%" height="15" fill="rgb(235,168,5)" fg:x="6790" fg:w="2"/><text x="49.8954%" y="367.50"></text></g><g><title>AppKit`-[NSApplication(NSEvent) _nextEventMatchingEventMask:untilDate:inMode:dequeue:] (22 samples, 0.16%)</title><rect x="49.5065%" y="533" width="0.1609%" height="15" fill="rgb(221,155,16)" fg:x="6771" fg:w="22"/><text x="49.7565%" y="543.50"></text></g><g><title>AppKit`_DPSNextEvent (22 samples, 0.16%)</title><rect x="49.5065%" y="517" width="0.1609%" height="15" fill="rgb(215,215,53)" fg:x="6771" fg:w="22"/><text x="49.7565%" y="527.50"></text></g><g><title>HIToolbox`_BlockUntilNextEventMatchingListInModeWithFilter (22 samples, 0.16%)</title><rect x="49.5065%" y="501" width="0.1609%" height="15" fill="rgb(223,4,10)" fg:x="6771" fg:w="22"/><text x="49.7565%" y="511.50"></text></g><g><title>HIToolbox`ReceiveNextEventCommon (22 samples, 0.16%)</title><rect x="49.5065%" y="485" width="0.1609%" height="15" fill="rgb(234,103,6)" fg:x="6771" fg:w="22"/><text x="49.7565%" y="495.50"></text></g><g><title>HIToolbox`RunCurrentEventLoopInMode (22 samples, 0.16%)</title><rect x="49.5065%" y="469" width="0.1609%" height="15" fill="rgb(227,97,0)" fg:x="6771" fg:w="22"/><text x="49.7565%" y="479.50"></text></g><g><title>cheval`minifb::os::macos::Window::update_with_buffer_stride (24 samples, 0.18%)</title><rect x="49.4992%" y="581" width="0.1755%" height="15" fill="rgb(234,150,53)" fg:x="6770" fg:w="24"/><text x="49.7492%" y="591.50"></text></g><g><title>cheval`mfb_update_with_buffer (23 samples, 0.17%)</title><rect x="49.5065%" y="565" width="0.1682%" height="15" fill="rgb(228,201,54)" fg:x="6771" fg:w="23"/><text x="49.7565%" y="575.50"></text></g><g><title>cheval`generic_update (23 samples, 0.17%)</title><rect x="49.5065%" y="549" width="0.1682%" height="15" fill="rgb(222,22,37)" fg:x="6771" fg:w="23"/><text x="49.7565%" y="559.50"></text></g><g><title>libsystem_c.dylib`nanosleep (5 samples, 0.04%)</title><rect x="49.6746%" y="549" width="0.0366%" height="15" fill="rgb(237,53,32)" fg:x="6794" fg:w="5"/><text x="49.9246%" y="559.50"></text></g><g><title>libsystem_kernel.dylib`clock_get_time (4 samples, 0.03%)</title><rect x="49.6819%" y="533" width="0.0292%" height="15" fill="rgb(233,25,53)" fg:x="6795" fg:w="4"/><text x="49.9319%" y="543.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (4 samples, 0.03%)</title><rect x="49.6819%" y="517" width="0.0292%" height="15" fill="rgb(210,40,34)" fg:x="6795" fg:w="4"/><text x="49.9319%" y="527.50"></text></g><g><title>cheval`minifb::rate::UpdateRate::update (24 samples, 0.18%)</title><rect x="49.6746%" y="581" width="0.1755%" height="15" fill="rgb(241,220,44)" fg:x="6794" fg:w="24"/><text x="49.9246%" y="591.50"></text></g><g><title>cheval`std::thread::sleep (24 samples, 0.18%)</title><rect x="49.6746%" y="565" width="0.1755%" height="15" fill="rgb(235,28,35)" fg:x="6794" fg:w="24"/><text x="49.9246%" y="575.50"></text></g><g><title>libsystem_kernel.dylib`__semwait_signal (19 samples, 0.14%)</title><rect x="49.7112%" y="549" width="0.1389%" height="15" fill="rgb(210,56,17)" fg:x="6799" fg:w="19"/><text x="49.9612%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (330 samples, 2.41%)</title><rect x="49.8501%" y="581" width="2.4128%" height="15" fill="rgb(224,130,29)" fg:x="6818" fg:w="330"/><text x="50.1001%" y="591.50">li..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (330 samples, 2.41%)</title><rect x="49.8501%" y="565" width="2.4128%" height="15" fill="rgb(235,212,8)" fg:x="6818" fg:w="330"/><text x="50.1001%" y="575.50">li..</text></g><g><title>libsystem_platform.dylib`__bzero (330 samples, 2.41%)</title><rect x="49.8501%" y="549" width="2.4128%" height="15" fill="rgb(223,33,50)" fg:x="6818" fg:w="330"/><text x="50.1001%" y="559.50">li..</text></g><g><title>cheval`&lt;cheval::window::window_minifb::WindowMinifb as cheval::window::Window&gt;::next_frame (7,123 samples, 52.08%)</title><rect x="0.2413%" y="597" width="52.0801%" height="15" fill="rgb(219,149,13)" fg:x="33" fg:w="7123"/><text x="0.4913%" y="607.50">cheval`&lt;cheval::window::window_minifb::WindowMinifb as cheval::window::Window&gt;::next_f..</text></g><g><title>libsystem_malloc.dylib`free_medium (8 samples, 0.06%)</title><rect x="52.2629%" y="581" width="0.0585%" height="15" fill="rgb(250,156,29)" fg:x="7148" fg:w="8"/><text x="52.5129%" y="591.50"></text></g><g><title>libsystem_kernel.dylib`madvise (8 samples, 0.06%)</title><rect x="52.2629%" y="565" width="0.0585%" height="15" fill="rgb(216,193,19)" fg:x="7148" fg:w="8"/><text x="52.5129%" y="575.50"></text></g><g><title>cheval`cheval::cheval::Cheval::render (6,236 samples, 45.59%)</title><rect x="52.3360%" y="597" width="45.5948%" height="15" fill="rgb(216,135,14)" fg:x="7158" fg:w="6236"/><text x="52.5860%" y="607.50">cheval`cheval::cheval::Cheval::render</text></g><g><title>cheval`&lt;cheval::block_element::BlockElement as cheval::element::Element&gt;::render (6,236 samples, 45.59%)</title><rect x="52.3360%" y="581" width="45.5948%" height="15" fill="rgb(241,47,5)" fg:x="7158" fg:w="6236"/><text x="52.5860%" y="591.50">cheval`&lt;cheval::block_element::BlockElement as cheval::element::Element&gt;::r..</text></g><g><title>cheval`cheval::render_buffer::RenderBuffer::for_pixel_in_block (6,236 samples, 45.59%)</title><rect x="52.3360%" y="565" width="45.5948%" height="15" fill="rgb(233,42,35)" fg:x="7158" fg:w="6236"/><text x="52.5860%" y="575.50">cheval`cheval::render_buffer::RenderBuffer::for_pixel_in_block</text></g><g><title>cheval`minifb::Window::new (5 samples, 0.04%)</title><rect x="97.9455%" y="549" width="0.0366%" height="15" fill="rgb(231,13,6)" fg:x="13396" fg:w="5"/><text x="98.1955%" y="559.50"></text></g><g><title>cheval`minifb::os::macos::Window::new (5 samples, 0.04%)</title><rect x="97.9455%" y="533" width="0.0366%" height="15" fill="rgb(207,181,40)" fg:x="13396" fg:w="5"/><text x="98.1955%" y="543.50"></text></g><g><title>cheval`mfb_open (5 samples, 0.04%)</title><rect x="97.9455%" y="517" width="0.0366%" height="15" fill="rgb(254,173,49)" fg:x="13396" fg:w="5"/><text x="98.1955%" y="527.50"></text></g><g><title>cheval`cheval::window::WindowFactory::create (7 samples, 0.05%)</title><rect x="97.9381%" y="597" width="0.0512%" height="15" fill="rgb(221,1,38)" fg:x="13395" fg:w="7"/><text x="98.1881%" y="607.50"></text></g><g><title>cheval`cheval::window::window_minifb::WindowMinifb::new (7 samples, 0.05%)</title><rect x="97.9381%" y="581" width="0.0512%" height="15" fill="rgb(206,124,46)" fg:x="13395" fg:w="7"/><text x="98.1881%" y="591.50"></text></g><g><title>cheval`cheval::window::window_minifb::WindowWithFrame::new (6 samples, 0.04%)</title><rect x="97.9455%" y="565" width="0.0439%" height="15" fill="rgb(249,21,11)" fg:x="13396" fg:w="6"/><text x="98.1955%" y="575.50"></text></g><g><title>cheval`main (13,385 samples, 97.87%)</title><rect x="0.2340%" y="789" width="97.8650%" height="15" fill="rgb(222,201,40)" fg:x="32" fg:w="13385"/><text x="0.4840%" y="799.50">cheval`main</text></g><g><title>cheval`std::rt::lang_start_internal (13,385 samples, 97.87%)</title><rect x="0.2340%" y="773" width="97.8650%" height="15" fill="rgb(235,61,29)" fg:x="32" fg:w="13385"/><text x="0.4840%" y="783.50">cheval`std::rt::lang_start_internal</text></g><g><title>cheval`std::rt::lang_start::_{{closure}} (13,384 samples, 97.86%)</title><rect x="0.2413%" y="757" width="97.8577%" height="15" fill="rgb(219,207,3)" fg:x="33" fg:w="13384"/><text x="0.4913%" y="767.50">cheval`std::rt::lang_start::_{{closure}}</text></g><g><title>cheval`std::sys_common::backtrace::__rust_begin_short_backtrace (13,384 samples, 97.86%)</title><rect x="0.2413%" y="741" width="97.8577%" height="15" fill="rgb(222,56,46)" fg:x="33" fg:w="13384"/><text x="0.4913%" y="751.50">cheval`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>cheval`cheval::main (13,384 samples, 97.86%)</title><rect x="0.2413%" y="725" width="97.8577%" height="15" fill="rgb(239,76,54)" fg:x="33" fg:w="13384"/><text x="0.4913%" y="735.50">cheval`cheval::main</text></g><g><title>cheval`tokio::runtime::handle::Handle::enter (13,384 samples, 97.86%)</title><rect x="0.2413%" y="709" width="97.8577%" height="15" fill="rgb(231,124,27)" fg:x="33" fg:w="13384"/><text x="0.4913%" y="719.50">cheval`tokio::runtime::handle::Handle::enter</text></g><g><title>cheval`tokio::runtime::context::enter (13,384 samples, 97.86%)</title><rect x="0.2413%" y="693" width="97.8577%" height="15" fill="rgb(249,195,6)" fg:x="33" fg:w="13384"/><text x="0.4913%" y="703.50">cheval`tokio::runtime::context::enter</text></g><g><title>cheval`tokio::runtime::basic_scheduler::BasicScheduler&lt;P&gt;::block_on (13,384 samples, 97.86%)</title><rect x="0.2413%" y="677" width="97.8577%" height="15" fill="rgb(237,174,47)" fg:x="33" fg:w="13384"/><text x="0.4913%" y="687.50">cheval`tokio::runtime::basic_scheduler::BasicScheduler&lt;P&gt;::block_on</text></g><g><title>cheval`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (13,384 samples, 97.86%)</title><rect x="0.2413%" y="661" width="97.8577%" height="15" fill="rgb(206,201,31)" fg:x="33" fg:w="13384"/><text x="0.4913%" y="671.50">cheval`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set</text></g><g><title>cheval`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (13,384 samples, 97.86%)</title><rect x="0.2413%" y="645" width="97.8577%" height="15" fill="rgb(231,57,52)" fg:x="33" fg:w="13384"/><text x="0.4913%" y="655.50">cheval`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>cheval`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (13,384 samples, 97.86%)</title><rect x="0.2413%" y="629" width="97.8577%" height="15" fill="rgb(248,177,22)" fg:x="33" fg:w="13384"/><text x="0.4913%" y="639.50">cheval`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set</text></g><g><title>cheval`cheval::main::_{{closure}} (13,384 samples, 97.86%)</title><rect x="0.2413%" y="613" width="97.8577%" height="15" fill="rgb(215,211,37)" fg:x="33" fg:w="13384"/><text x="0.4913%" y="623.50">cheval`cheval::main::_{{closure}}</text></g><g><title>libsystem_platform.dylib`__bzero (13 samples, 0.10%)</title><rect x="98.0039%" y="597" width="0.0951%" height="15" fill="rgb(241,128,51)" fg:x="13404" fg:w="13"/><text x="98.2539%" y="607.50"></text></g><g><title>dyld`start (13,387 samples, 97.88%)</title><rect x="0.2340%" y="805" width="97.8797%" height="15" fill="rgb(227,165,31)" fg:x="32" fg:w="13387"/><text x="0.4840%" y="815.50">dyld`start</text></g><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (2 samples, 0.01%)</title><rect x="98.0990%" y="789" width="0.0146%" height="15" fill="rgb(228,167,24)" fg:x="13417" fg:w="2"/><text x="98.3490%" y="799.50"></text></g><g><title>libsystem_kernel.dylib`__exit (2 samples, 0.01%)</title><rect x="98.0990%" y="773" width="0.0146%" height="15" fill="rgb(228,143,12)" fg:x="13417" fg:w="2"/><text x="98.3490%" y="783.50"></text></g><g><title>libsystem_kernel.dylib`__workq_kernreturn (59 samples, 0.43%)</title><rect x="98.1429%" y="789" width="0.4314%" height="15" fill="rgb(249,149,8)" fg:x="13423" fg:w="59"/><text x="98.3929%" y="799.50"></text></g><g><title>libsystem_pthread.dylib`DYLD-STUB$$__workq_kernreturn (2 samples, 0.01%)</title><rect x="98.5742%" y="789" width="0.0146%" height="15" fill="rgb(243,35,44)" fg:x="13482" fg:w="2"/><text x="98.8242%" y="799.50"></text></g><g><title>libdispatch.dylib`_dispatch_event_loop_poke (4 samples, 0.03%)</title><rect x="98.5889%" y="741" width="0.0292%" height="15" fill="rgb(246,89,9)" fg:x="13484" fg:w="4"/><text x="98.8389%" y="751.50"></text></g><g><title>libsystem_kernel.dylib`kevent_id (4 samples, 0.03%)</title><rect x="98.5889%" y="725" width="0.0292%" height="15" fill="rgb(233,213,13)" fg:x="13484" fg:w="4"/><text x="98.8389%" y="735.50"></text></g><g><title>libdispatch.dylib`_dispatch_kevent_worker_thread (7 samples, 0.05%)</title><rect x="98.5889%" y="773" width="0.0512%" height="15" fill="rgb(233,141,41)" fg:x="13484" fg:w="7"/><text x="98.8389%" y="783.50"></text></g><g><title>libdispatch.dylib`_dispatch_event_loop_drain_timers (7 samples, 0.05%)</title><rect x="98.5889%" y="757" width="0.0512%" height="15" fill="rgb(239,167,4)" fg:x="13484" fg:w="7"/><text x="98.8389%" y="767.50"></text></g><g><title>libdispatch.dylib`_dispatch_event_loop_merge (2 samples, 0.01%)</title><rect x="98.6547%" y="757" width="0.0146%" height="15" fill="rgb(209,217,16)" fg:x="13493" fg:w="2"/><text x="98.9047%" y="767.50"></text></g><g><title>libdispatch.dylib`_dispatch_kevent_merge (2 samples, 0.01%)</title><rect x="98.6547%" y="741" width="0.0146%" height="15" fill="rgb(219,88,35)" fg:x="13493" fg:w="2"/><text x="98.9047%" y="751.50"></text></g><g><title>QuartzCore`invoke_presented_callback(void*) (2 samples, 0.01%)</title><rect x="98.6839%" y="709" width="0.0146%" height="15" fill="rgb(220,193,23)" fg:x="13497" fg:w="2"/><text x="98.9339%" y="719.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (4 samples, 0.03%)</title><rect x="98.6839%" y="725" width="0.0292%" height="15" fill="rgb(230,90,52)" fg:x="13497" fg:w="4"/><text x="98.9339%" y="735.50"></text></g><g><title>IOGPU`__54-[IOGPUMetalCommandQueue _submitCommandBuffers:count:]_block_invoke.22 (2 samples, 0.01%)</title><rect x="98.7205%" y="629" width="0.0146%" height="15" fill="rgb(252,106,19)" fg:x="13502" fg:w="2"/><text x="98.9705%" y="639.50"></text></g><g><title>Metal`MTLDispatchListApply (4 samples, 0.03%)</title><rect x="98.7497%" y="597" width="0.0292%" height="15" fill="rgb(206,74,20)" fg:x="13506" fg:w="4"/><text x="98.9997%" y="607.50"></text></g><g><title>QuartzCore`layer_private_present_impl(_CAMetalLayerPrivate*, CAMetalDrawable*, double, unsigned int) (2 samples, 0.01%)</title><rect x="98.7643%" y="581" width="0.0146%" height="15" fill="rgb(230,138,44)" fg:x="13508" fg:w="2"/><text x="99.0143%" y="591.50"></text></g><g><title>Metal`-[_MTLCommandBuffer didScheduleWithStartTime:endTime:error:] (5 samples, 0.04%)</title><rect x="98.7497%" y="613" width="0.0366%" height="15" fill="rgb(235,182,43)" fg:x="13506" fg:w="5"/><text x="98.9997%" y="623.50"></text></g><g><title>IOGPU`IOGPUMetalCommandBufferStorageDealloc (3 samples, 0.02%)</title><rect x="98.7863%" y="581" width="0.0219%" height="15" fill="rgb(242,16,51)" fg:x="13511" fg:w="3"/><text x="99.0363%" y="591.50"></text></g><g><title>IOGPU`IOGPUMetalCommandBufferStorageReleaseAllResources (2 samples, 0.01%)</title><rect x="98.7936%" y="565" width="0.0146%" height="15" fill="rgb(248,9,4)" fg:x="13512" fg:w="2"/><text x="99.0436%" y="575.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_invoke (15 samples, 0.11%)</title><rect x="98.7132%" y="725" width="0.1097%" height="15" fill="rgb(210,31,22)" fg:x="13501" fg:w="15"/><text x="98.9632%" y="735.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_serial_drain (15 samples, 0.11%)</title><rect x="98.7132%" y="709" width="0.1097%" height="15" fill="rgb(239,54,39)" fg:x="13501" fg:w="15"/><text x="98.9632%" y="719.50"></text></g><g><title>libdispatch.dylib`_dispatch_mach_invoke (15 samples, 0.11%)</title><rect x="98.7132%" y="693" width="0.1097%" height="15" fill="rgb(230,99,41)" fg:x="13501" fg:w="15"/><text x="98.9632%" y="703.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_serial_drain (14 samples, 0.10%)</title><rect x="98.7205%" y="677" width="0.1024%" height="15" fill="rgb(253,106,12)" fg:x="13502" fg:w="14"/><text x="98.9705%" y="687.50"></text></g><g><title>libdispatch.dylib`_dispatch_mach_msg_invoke (14 samples, 0.10%)</title><rect x="98.7205%" y="661" width="0.1024%" height="15" fill="rgb(213,46,41)" fg:x="13502" fg:w="14"/><text x="98.9705%" y="671.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout4 (14 samples, 0.10%)</title><rect x="98.7205%" y="645" width="0.1024%" height="15" fill="rgb(215,133,35)" fg:x="13502" fg:w="14"/><text x="98.9705%" y="655.50"></text></g><g><title>IOGPU`__IOGPUNotificationQueueSetDispatchQueue_block_invoke (12 samples, 0.09%)</title><rect x="98.7351%" y="629" width="0.0877%" height="15" fill="rgb(213,28,5)" fg:x="13504" fg:w="12"/><text x="98.9851%" y="639.50"></text></g><g><title>Metal`-[_MTLCommandQueue commandBufferDidComplete:startTime:completionTime:error:] (5 samples, 0.04%)</title><rect x="98.7863%" y="613" width="0.0366%" height="15" fill="rgb(215,77,49)" fg:x="13511" fg:w="5"/><text x="99.0363%" y="623.50"></text></g><g><title>IOGPU`-[IOGPUMetalCommandBuffer didCompleteWithStartTime:endTime:error:] (5 samples, 0.04%)</title><rect x="98.7863%" y="597" width="0.0366%" height="15" fill="rgb(248,100,22)" fg:x="13511" fg:w="5"/><text x="99.0363%" y="607.50"></text></g><g><title>IOKit`io_connect_method (44 samples, 0.32%)</title><rect x="98.8448%" y="597" width="0.3217%" height="15" fill="rgb(208,67,9)" fg:x="13519" fg:w="44"/><text x="99.0948%" y="607.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (44 samples, 0.32%)</title><rect x="98.8448%" y="581" width="0.3217%" height="15" fill="rgb(219,133,21)" fg:x="13519" fg:w="44"/><text x="99.0948%" y="591.50"></text></g><g><title>IOGPU`-[IOGPUMetalCommandQueue submitCommandBuffers:count:] (45 samples, 0.33%)</title><rect x="98.8448%" y="661" width="0.3290%" height="15" fill="rgb(246,46,29)" fg:x="13519" fg:w="45"/><text x="99.0948%" y="671.50"></text></g><g><title>IOGPU`-[IOGPUMetalCommandQueue _submitCommandBuffers:count:] (45 samples, 0.33%)</title><rect x="98.8448%" y="645" width="0.3290%" height="15" fill="rgb(246,185,52)" fg:x="13519" fg:w="45"/><text x="99.0948%" y="655.50"></text></g><g><title>IOGPU`IOGPUCommandQueueSubmitCommandBuffers (45 samples, 0.33%)</title><rect x="98.8448%" y="629" width="0.3290%" height="15" fill="rgb(252,136,11)" fg:x="13519" fg:w="45"/><text x="99.0948%" y="639.50"></text></g><g><title>IOKit`IOConnectCallMethod (45 samples, 0.33%)</title><rect x="98.8448%" y="613" width="0.3290%" height="15" fill="rgb(219,138,53)" fg:x="13519" fg:w="45"/><text x="99.0948%" y="623.50"></text></g><g><title>Metal`-[_MTLCommandQueue _submitAvailableCommandBuffers] (50 samples, 0.37%)</title><rect x="98.8302%" y="677" width="0.3656%" height="15" fill="rgb(211,51,23)" fg:x="13517" fg:w="50"/><text x="99.0802%" y="687.50"></text></g><g><title>libdispatch.dylib`_dispatch_semaphore_wait_slow (3 samples, 0.02%)</title><rect x="99.1738%" y="661" width="0.0219%" height="15" fill="rgb(247,221,28)" fg:x="13564" fg:w="3"/><text x="99.4238%" y="671.50"></text></g><g><title>libsystem_kernel.dylib`semaphore_wait_trap (3 samples, 0.02%)</title><rect x="99.1738%" y="645" width="0.0219%" height="15" fill="rgb(251,222,45)" fg:x="13564" fg:w="3"/><text x="99.4238%" y="655.50"></text></g><g><title>CoreFoundation`-[NSMutableArray removeObjectsInRange:inArray:range:] (2 samples, 0.01%)</title><rect x="99.2323%" y="613" width="0.0146%" height="15" fill="rgb(217,162,53)" fg:x="13572" fg:w="2"/><text x="99.4823%" y="623.50"></text></g><g><title>libdispatch.dylib`_dispatch_event_loop_poke (2 samples, 0.01%)</title><rect x="99.2688%" y="533" width="0.0146%" height="15" fill="rgb(229,93,14)" fg:x="13577" fg:w="2"/><text x="99.5188%" y="543.50"></text></g><g><title>libdispatch.dylib`_dispatch_kq_drain (2 samples, 0.01%)</title><rect x="99.2688%" y="517" width="0.0146%" height="15" fill="rgb(209,67,49)" fg:x="13577" fg:w="2"/><text x="99.5188%" y="527.50"></text></g><g><title>libsystem_kernel.dylib`kevent_qos (2 samples, 0.01%)</title><rect x="99.2688%" y="501" width="0.0146%" height="15" fill="rgb(213,87,29)" fg:x="13577" fg:w="2"/><text x="99.5188%" y="511.50"></text></g><g><title>AGXMetalG13X`0x00000001d3d738e8 (3 samples, 0.02%)</title><rect x="99.2688%" y="549" width="0.0219%" height="15" fill="rgb(205,151,52)" fg:x="13577" fg:w="3"/><text x="99.5188%" y="559.50"></text></g><g><title>Metal`-[_MTLCommandBuffer dealloc] (2 samples, 0.01%)</title><rect x="99.2908%" y="533" width="0.0146%" height="15" fill="rgb(253,215,39)" fg:x="13580" fg:w="2"/><text x="99.5408%" y="543.50"></text></g><g><title>Metal`-[_MTLObjectWithLabel dealloc] (2 samples, 0.01%)</title><rect x="99.2908%" y="517" width="0.0146%" height="15" fill="rgb(221,220,41)" fg:x="13580" fg:w="2"/><text x="99.5408%" y="527.50"></text></g><g><title>libobjc.A.dylib`_objc_rootDealloc (2 samples, 0.01%)</title><rect x="99.2908%" y="501" width="0.0146%" height="15" fill="rgb(218,133,21)" fg:x="13580" fg:w="2"/><text x="99.5408%" y="511.50"></text></g><g><title>IOGPU`-[IOGPUMetalCommandBuffer dealloc] (3 samples, 0.02%)</title><rect x="99.2908%" y="549" width="0.0219%" height="15" fill="rgb(221,193,43)" fg:x="13580" fg:w="3"/><text x="99.5408%" y="559.50"></text></g><g><title>AGXMetalG13X`0x00000001d3c8b034 (8 samples, 0.06%)</title><rect x="99.2688%" y="565" width="0.0585%" height="15" fill="rgb(240,128,52)" fg:x="13577" fg:w="8"/><text x="99.5188%" y="575.50"></text></g><g><title>CoreFoundation`-[__NSArrayM removeAllObjects] (11 samples, 0.08%)</title><rect x="99.2688%" y="597" width="0.0804%" height="15" fill="rgb(253,114,12)" fg:x="13577" fg:w="11"/><text x="99.5188%" y="607.50"></text></g><g><title>libsystem_blocks.dylib`_Block_release (11 samples, 0.08%)</title><rect x="99.2688%" y="581" width="0.0804%" height="15" fill="rgb(215,223,47)" fg:x="13577" fg:w="11"/><text x="99.5188%" y="591.50"></text></g><g><title>libc+ (3 samples, 0.02%)</title><rect x="99.3273%" y="565" width="0.0219%" height="15" fill="rgb(248,225,23)" fg:x="13585" fg:w="3"/><text x="99.5773%" y="575.50"></text></g><g><title>QuartzCore`_XImageQueueDidComposite (23 samples, 0.17%)</title><rect x="99.2030%" y="661" width="0.1682%" height="15" fill="rgb(250,108,0)" fg:x="13568" fg:w="23"/><text x="99.4530%" y="671.50"></text></g><g><title>QuartzCore`CAImageQueueDidComposite (23 samples, 0.17%)</title><rect x="99.2030%" y="645" width="0.1682%" height="15" fill="rgb(228,208,7)" fg:x="13568" fg:w="23"/><text x="99.4530%" y="655.50"></text></g><g><title>QuartzCore`layer_composited(_CAImageQueue*, void*, unsigned int) (19 samples, 0.14%)</title><rect x="99.2323%" y="629" width="0.1389%" height="15" fill="rgb(244,45,10)" fg:x="13572" fg:w="19"/><text x="99.4823%" y="639.50"></text></g><g><title>QuartzCore`-[CAMetalDrawable didScheduledPresent] (14 samples, 0.10%)</title><rect x="99.2688%" y="613" width="0.1024%" height="15" fill="rgb(207,125,25)" fg:x="13577" fg:w="14"/><text x="99.5188%" y="623.50"></text></g><g><title>libdispatch.dylib`_dispatch_semaphore_signal_slow (2 samples, 0.01%)</title><rect x="99.3566%" y="597" width="0.0146%" height="15" fill="rgb(210,195,18)" fg:x="13589" fg:w="2"/><text x="99.6066%" y="607.50"></text></g><g><title>libsystem_kernel.dylib`semaphore_signal_trap (2 samples, 0.01%)</title><rect x="99.3566%" y="581" width="0.0146%" height="15" fill="rgb(249,80,12)" fg:x="13589" fg:w="2"/><text x="99.6066%" y="591.50"></text></g><g><title>QuartzCore`_XImageQueueDidPresent (4 samples, 0.03%)</title><rect x="99.3712%" y="661" width="0.0292%" height="15" fill="rgb(221,65,9)" fg:x="13591" fg:w="4"/><text x="99.6212%" y="671.50"></text></g><g><title>libdispatch.dylib`_dispatch_event_loop_poke (4 samples, 0.03%)</title><rect x="99.3712%" y="645" width="0.0292%" height="15" fill="rgb(235,49,36)" fg:x="13591" fg:w="4"/><text x="99.6212%" y="655.50"></text></g><g><title>libsystem_kernel.dylib`kevent_id (4 samples, 0.03%)</title><rect x="99.3712%" y="629" width="0.0292%" height="15" fill="rgb(225,32,20)" fg:x="13591" fg:w="4"/><text x="99.6212%" y="639.50"></text></g><g><title>libdispatch.dylib`_dispatch_continuation_pop (91 samples, 0.67%)</title><rect x="98.8228%" y="709" width="0.6654%" height="15" fill="rgb(215,141,46)" fg:x="13516" fg:w="91"/><text x="99.0728%" y="719.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (90 samples, 0.66%)</title><rect x="98.8302%" y="693" width="0.6580%" height="15" fill="rgb(250,160,47)" fg:x="13517" fg:w="90"/><text x="99.0802%" y="703.50"></text></g><g><title>QuartzCore`invocation function for block in CA::Context::client_port (40 samples, 0.29%)</title><rect x="99.1957%" y="677" width="0.2925%" height="15" fill="rgb(216,222,40)" fg:x="13567" fg:w="40"/><text x="99.4457%" y="687.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (12 samples, 0.09%)</title><rect x="99.4005%" y="661" width="0.0877%" height="15" fill="rgb(234,217,39)" fg:x="13595" fg:w="12"/><text x="99.6505%" y="671.50"></text></g><g><title>libsystem_blocks.dylib`_Block_release (2 samples, 0.01%)</title><rect x="99.4955%" y="693" width="0.0146%" height="15" fill="rgb(207,178,40)" fg:x="13608" fg:w="2"/><text x="99.7455%" y="703.50"></text></g><g><title>libobjc.A.dylib`objc_destructInstance (2 samples, 0.01%)</title><rect x="99.4955%" y="677" width="0.0146%" height="15" fill="rgb(221,136,13)" fg:x="13608" fg:w="2"/><text x="99.7455%" y="687.50"></text></g><g><title>libobjc.A.dylib`_object_remove_assocations (2 samples, 0.01%)</title><rect x="99.4955%" y="661" width="0.0146%" height="15" fill="rgb(249,199,10)" fg:x="13608" fg:w="2"/><text x="99.7455%" y="671.50"></text></g><g><title>libobjc.A.dylib`bool objc::DenseMapBase&lt;objc::DenseMap&lt;DisguisedPtr&lt;objc_object&gt;, objc::DenseMap&lt;void const*, objc::ObjcAssociation, objc::DenseMapValueInfo&lt;objc::ObjcAssociation&gt;, objc::DenseMapInfo&lt;void const*&gt;, objc::detail::DenseMapPair&lt;void const*, objc::ObjcAssociation&gt; &gt;, objc::DenseMapValueInfo&lt;objc::DenseMap&lt;void const*, objc::ObjcAssociation, objc::DenseMapValueInfo&lt;objc::ObjcAssociation&gt;, objc::DenseMapInfo&lt;void const*&gt;, objc::detail::DenseMapPair&lt;void const*, objc::ObjcAssociation&gt; &gt; &gt;, objc::DenseMapInfo&lt;DisguisedPtr&lt;objc_object&gt; &gt;, objc::detail::DenseMapPair&lt;DisguisedPtr&lt;objc_object&gt;, objc::DenseMap&lt;void const*, objc::ObjcAssociation, objc::DenseMapValueInfo&lt;objc::ObjcAssociation&gt;, objc::DenseMapInfo&lt;void const*&gt;, objc::detail::DenseMapPair&lt;void const*, objc::ObjcAssociation&gt; &gt; &gt; &gt;, DisguisedPtr&lt;objc_object&gt;, objc::DenseMap&lt;void const*, objc::ObjcAssociation, objc::DenseMapValueInfo&lt;objc::ObjcAssociation&gt;, objc::DenseMapInfo&lt;void const*&gt;, objc::detail::DenseMapPair (2 samples, 0.01%)</title><rect x="99.4955%" y="645" width="0.0146%" height="15" fill="rgb(249,222,13)" fg:x="13608" fg:w="2"/><text x="99.7455%" y="655.50"></text></g><g><title>libdispatch.dylib`_dispatch_source_handler_dispose (4 samples, 0.03%)</title><rect x="99.4955%" y="709" width="0.0292%" height="15" fill="rgb(244,185,38)" fg:x="13608" fg:w="4"/><text x="99.7455%" y="719.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_serial_drain (119 samples, 0.87%)</title><rect x="98.6693%" y="741" width="0.8701%" height="15" fill="rgb(236,202,9)" fg:x="13495" fg:w="119"/><text x="98.9193%" y="751.50"></text></g><g><title>libdispatch.dylib`_dispatch_source_invoke (98 samples, 0.72%)</title><rect x="98.8228%" y="725" width="0.7165%" height="15" fill="rgb(250,229,37)" fg:x="13516" fg:w="98"/><text x="99.0728%" y="735.50"></text></g><g><title>libsystem_pthread.dylib`start_wqthread (195 samples, 1.43%)</title><rect x="98.1209%" y="805" width="1.4258%" height="15" fill="rgb(206,174,23)" fg:x="13420" fg:w="195"/><text x="98.3709%" y="815.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_wqthread (131 samples, 0.96%)</title><rect x="98.5889%" y="789" width="0.9578%" height="15" fill="rgb(211,33,43)" fg:x="13484" fg:w="131"/><text x="98.8389%" y="799.50"></text></g><g><title>libdispatch.dylib`_dispatch_workloop_worker_thread (123 samples, 0.90%)</title><rect x="98.6474%" y="773" width="0.8993%" height="15" fill="rgb(245,58,50)" fg:x="13492" fg:w="123"/><text x="98.8974%" y="783.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_invoke (120 samples, 0.88%)</title><rect x="98.6693%" y="757" width="0.8774%" height="15" fill="rgb(244,68,36)" fg:x="13495" fg:w="120"/><text x="98.9193%" y="767.50"></text></g><g><title>all (13,677 samples, 100%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(232,229,15)" fg:x="0" fg:w="13677"/><text x="0.2500%" y="831.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (62 samples, 0.45%)</title><rect x="99.5467%" y="805" width="0.4533%" height="15" fill="rgb(254,30,23)" fg:x="13615" fg:w="62"/><text x="99.7967%" y="815.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_start (62 samples, 0.45%)</title><rect x="99.5467%" y="789" width="0.4533%" height="15" fill="rgb(235,160,14)" fg:x="13615" fg:w="62"/><text x="99.7967%" y="799.50"></text></g><g><title>CoreVideo`CVDisplayLink::runIOThread (62 samples, 0.45%)</title><rect x="99.5467%" y="773" width="0.4533%" height="15" fill="rgb(212,155,44)" fg:x="13615" fg:w="62"/><text x="99.7967%" y="783.50"></text></g><g><title>CoreVideo`CVDisplayLink::waitUntil (62 samples, 0.45%)</title><rect x="99.5467%" y="757" width="0.4533%" height="15" fill="rgb(226,2,50)" fg:x="13615" fg:w="62"/><text x="99.7967%" y="767.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (62 samples, 0.45%)</title><rect x="99.5467%" y="741" width="0.4533%" height="15" fill="rgb(234,177,6)" fg:x="13615" fg:w="62"/><text x="99.7967%" y="751.50"></text></g></svg></svg>